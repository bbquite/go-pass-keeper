syntax = "proto3";

package internal.proto;

option go_package = "github.com/bbquite/go-pass-keeper/internal/proto";

message ErrorResponse {
  bool error = 1;
  string msg = 2;
}

message Empty {}

message AuthUserRequest {
  string username = 1;
  string password = 2;
}

message AuthUserResponse {
  string token = 1;
  ErrorResponse error = 2;
}

message RegisterUserRequest {
  string username = 1;
  string password = 2;
  string email = 3;
}

message RegisterUserResponse {
  string token = 1;
  ErrorResponse error = 2;
}

message PairData {
  string id = 1;
  string key = 2;
  string pwd = 3;
  string meta = 4;
  string UploadedAt = 5;
}

message CreatePairsDataRequest{
  PairData pair = 1;
}

message CreatePairsDataResponse{
  PairData pair = 1;
  ErrorResponse error = 2;
}

message GetPairsDataResponse{
  repeated PairData pairs = 1;
  ErrorResponse error = 2;
}

message UpdatePairsDataRequest{
  PairData pair = 1;
}

message DeletePairsDataRequest{
  uint32 id = 1;
}

service PassKeeperService {
  rpc AuthUser(AuthUserRequest) returns (AuthUserResponse);
  rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse);

  rpc CreatePairData(CreatePairsDataRequest) returns (CreatePairsDataResponse);
  rpc GetPairsDataList(Empty) returns (GetPairsDataResponse);
  rpc UpdatePairData(UpdatePairsDataRequest) returns (Empty);
  rpc DeletePairData(DeletePairsDataRequest) returns (Empty);

//  rpc UploadSimpleData(RegisterUserRequest) returns (RegisterUserResponse);
//  rpc GetSimpleData(RegisterUserRequest) returns (RegisterUserResponse);
//
//  rpc UploadBinaryData(RegisterUserRequest) returns (RegisterUserResponse);
//  rpc GetBinaryData(RegisterUserRequest) returns (RegisterUserResponse);
//
//  rpc UploadCardData(RegisterUserRequest) returns (RegisterUserResponse);
//  rpc GetCardData(RegisterUserRequest) returns (RegisterUserResponse);
}