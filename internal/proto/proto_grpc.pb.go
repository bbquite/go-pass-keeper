// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: internal/proto/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PassKeeperService_AuthUser_FullMethodName         = "/internal.proto.PassKeeperService/AuthUser"
	PassKeeperService_RegisterUser_FullMethodName     = "/internal.proto.PassKeeperService/RegisterUser"
	PassKeeperService_CreatePairData_FullMethodName   = "/internal.proto.PassKeeperService/CreatePairData"
	PassKeeperService_GetPairsDataList_FullMethodName = "/internal.proto.PassKeeperService/GetPairsDataList"
	PassKeeperService_UpdatePairData_FullMethodName   = "/internal.proto.PassKeeperService/UpdatePairData"
	PassKeeperService_DeletePairData_FullMethodName   = "/internal.proto.PassKeeperService/DeletePairData"
)

// PassKeeperServiceClient is the client API for PassKeeperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassKeeperServiceClient interface {
	AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AuthUserResponse, error)
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	CreatePairData(ctx context.Context, in *CreateDataRequest, opts ...grpc.CallOption) (*CreateDataResponse, error)
	GetPairsDataList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetDataResponse, error)
	UpdatePairData(ctx context.Context, in *UpdateDataRequest, opts ...grpc.CallOption) (*Empty, error)
	DeletePairData(ctx context.Context, in *DeleteDataRequest, opts ...grpc.CallOption) (*Empty, error)
}

type passKeeperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPassKeeperServiceClient(cc grpc.ClientConnInterface) PassKeeperServiceClient {
	return &passKeeperServiceClient{cc}
}

func (c *passKeeperServiceClient) AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AuthUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthUserResponse)
	err := c.cc.Invoke(ctx, PassKeeperService_AuthUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passKeeperServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, PassKeeperService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passKeeperServiceClient) CreatePairData(ctx context.Context, in *CreateDataRequest, opts ...grpc.CallOption) (*CreateDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDataResponse)
	err := c.cc.Invoke(ctx, PassKeeperService_CreatePairData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passKeeperServiceClient) GetPairsDataList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, PassKeeperService_GetPairsDataList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passKeeperServiceClient) UpdatePairData(ctx context.Context, in *UpdateDataRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PassKeeperService_UpdatePairData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passKeeperServiceClient) DeletePairData(ctx context.Context, in *DeleteDataRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PassKeeperService_DeletePairData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassKeeperServiceServer is the server API for PassKeeperService service.
// All implementations must embed UnimplementedPassKeeperServiceServer
// for forward compatibility.
type PassKeeperServiceServer interface {
	AuthUser(context.Context, *AuthUserRequest) (*AuthUserResponse, error)
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	CreatePairData(context.Context, *CreateDataRequest) (*CreateDataResponse, error)
	GetPairsDataList(context.Context, *Empty) (*GetDataResponse, error)
	UpdatePairData(context.Context, *UpdateDataRequest) (*Empty, error)
	DeletePairData(context.Context, *DeleteDataRequest) (*Empty, error)
	mustEmbedUnimplementedPassKeeperServiceServer()
}

// UnimplementedPassKeeperServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPassKeeperServiceServer struct{}

func (UnimplementedPassKeeperServiceServer) AuthUser(context.Context, *AuthUserRequest) (*AuthUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUser not implemented")
}
func (UnimplementedPassKeeperServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedPassKeeperServiceServer) CreatePairData(context.Context, *CreateDataRequest) (*CreateDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePairData not implemented")
}
func (UnimplementedPassKeeperServiceServer) GetPairsDataList(context.Context, *Empty) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPairsDataList not implemented")
}
func (UnimplementedPassKeeperServiceServer) UpdatePairData(context.Context, *UpdateDataRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePairData not implemented")
}
func (UnimplementedPassKeeperServiceServer) DeletePairData(context.Context, *DeleteDataRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePairData not implemented")
}
func (UnimplementedPassKeeperServiceServer) mustEmbedUnimplementedPassKeeperServiceServer() {}
func (UnimplementedPassKeeperServiceServer) testEmbeddedByValue()                           {}

// UnsafePassKeeperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassKeeperServiceServer will
// result in compilation errors.
type UnsafePassKeeperServiceServer interface {
	mustEmbedUnimplementedPassKeeperServiceServer()
}

func RegisterPassKeeperServiceServer(s grpc.ServiceRegistrar, srv PassKeeperServiceServer) {
	// If the following call pancis, it indicates UnimplementedPassKeeperServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PassKeeperService_ServiceDesc, srv)
}

func _PassKeeperService_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassKeeperServiceServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassKeeperService_AuthUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassKeeperServiceServer).AuthUser(ctx, req.(*AuthUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassKeeperService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassKeeperServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassKeeperService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassKeeperServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassKeeperService_CreatePairData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassKeeperServiceServer).CreatePairData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassKeeperService_CreatePairData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassKeeperServiceServer).CreatePairData(ctx, req.(*CreateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassKeeperService_GetPairsDataList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassKeeperServiceServer).GetPairsDataList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassKeeperService_GetPairsDataList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassKeeperServiceServer).GetPairsDataList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassKeeperService_UpdatePairData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassKeeperServiceServer).UpdatePairData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassKeeperService_UpdatePairData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassKeeperServiceServer).UpdatePairData(ctx, req.(*UpdateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassKeeperService_DeletePairData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassKeeperServiceServer).DeletePairData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassKeeperService_DeletePairData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassKeeperServiceServer).DeletePairData(ctx, req.(*DeleteDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PassKeeperService_ServiceDesc is the grpc.ServiceDesc for PassKeeperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PassKeeperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internal.proto.PassKeeperService",
	HandlerType: (*PassKeeperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthUser",
			Handler:    _PassKeeperService_AuthUser_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _PassKeeperService_RegisterUser_Handler,
		},
		{
			MethodName: "CreatePairData",
			Handler:    _PassKeeperService_CreatePairData_Handler,
		},
		{
			MethodName: "GetPairsDataList",
			Handler:    _PassKeeperService_GetPairsDataList_Handler,
		},
		{
			MethodName: "UpdatePairData",
			Handler:    _PassKeeperService_UpdatePairData_Handler,
		},
		{
			MethodName: "DeletePairData",
			Handler:    _PassKeeperService_DeletePairData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/proto.proto",
}
